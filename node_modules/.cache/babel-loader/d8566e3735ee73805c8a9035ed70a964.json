{"ast":null,"code":"import _regeneratorRuntime from\"/Users/chris/Desktop/covid19-confirmed/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/chris/Desktop/covid19-confirmed/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/chris/Desktop/covid19-confirmed/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useRef,useState}from'react';import MapGL,{Layer,Source}from'react-map-gl';import'mapbox-gl/dist/mapbox-gl.css';import red from'@material-ui/core/colors/red';import{getGEOData}from'./services';export default function Map(){var _useState=useState({latitude:40.67,longitude:-103.59,zoom:1.5,bearing:0,pitch:0}),_useState2=_slicedToArray(_useState,2),viewport=_useState2[0],setViewport=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),clusterData=_useState4[0],setClusterData=_useState4[1];var sourceRef=useRef();// Get GEO data when component mounts\nuseEffect(function(){var _geoData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _yield$getGEOData,data,features;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getGEOData();case 2:_yield$getGEOData=_context.sent;data=_yield$getGEOData.data;features=data.map(function(_ref2){var city=_ref2.city,_ref2$coordinates=_ref2.coordinates,latitude=_ref2$coordinates.latitude,longitude=_ref2$coordinates.longitude,province=_ref2.province,_ref2$stats=_ref2.stats,confirmed=_ref2$stats.confirmed,deaths=_ref2$stats.deaths,recovered=_ref2$stats.recovered;var cases=parseInt(confirmed);var numDeaths=parseInt(deaths);var numRecovered=parseInt(recovered);return{geometry:{coordinates:[longitude,latitude],type:'Point'},properties:{active:cases-deaths-recovered,cases:cases,city:city,country:'USA',deaths:numDeaths,recovered:numRecovered,state:province},type:'Feature'};});setClusterData({features:features,type:'FeatureCollection'});case 6:case\"end\":return _context.stop();}}},_callee);}));return function _geoData(){return _ref.apply(this,arguments);};}();_geoData();},[]);var _onViewportChange=function _onViewportChange(updatedViewport){return setViewport(updatedViewport);};var _onClick=function _onClick(event){if(!(event.hasOwnProperty('features')&&event.features[0]))return;var feature=event.features[0];var clusterId=feature.properties.cluster_id;var mapboxSource=sourceRef.current.getSource();mapboxSource.getClusterExpansionZoom(clusterId,function(err,zoom){if(err)return;_onViewportChange({latitude:feature.geometry.coordinates[1],longitude:feature.geometry.coordinates[0],transitionDuration:500,viewport:viewport,zoom:zoom});});};var clusterLayer={filter:['all',['has','active'],['>','active',0]],id:'cluster-circle',paint:{'circle-color':red[500],'circle-opacity':0.3,'circle-radius':['step',['get','active'],2.5,50,15,375,20]},source:'cluster-circle',type:'circle'};return/*#__PURE__*/React.createElement(MapGL,Object.assign({},viewport,{dragRotate:false,height:\"100%\",interactiveLayerIds:[clusterLayer.id],mapStyle:\"mapbox://styles/mapbox/dark-v9\",mapboxApiAccessToken:process.env.REACT_APP_MAPBOX_GL_API_TOKEN,onClick:_onClick,onViewportChange:_onViewportChange,width:\"100%\"}),/*#__PURE__*/React.createElement(Source,{data:clusterData,ref:sourceRef,type:\"geojson\"},/*#__PURE__*/React.createElement(Layer,clusterLayer)));}","map":{"version":3,"sources":["/Users/chris/Desktop/covid19-confirmed/app/src/Map.js"],"names":["React","useEffect","useRef","useState","MapGL","Layer","Source","red","getGEOData","Map","latitude","longitude","zoom","bearing","pitch","viewport","setViewport","clusterData","setClusterData","sourceRef","_geoData","data","features","map","city","coordinates","province","stats","confirmed","deaths","recovered","cases","parseInt","numDeaths","numRecovered","geometry","type","properties","active","country","state","_onViewportChange","updatedViewport","_onClick","event","hasOwnProperty","feature","clusterId","cluster_id","mapboxSource","current","getSource","getClusterExpansionZoom","err","transitionDuration","clusterLayer","filter","id","paint","source","process","env","REACT_APP_MAPBOX_GL_API_TOKEN"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport MapGL, { Layer, Source } from 'react-map-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport red from '@material-ui/core/colors/red';\n\nimport { getGEOData } from './services';\n\nexport default function Map() {\n  const [viewport, setViewport] = useState({\n    latitude: 40.67,\n    longitude: -103.59,\n    zoom: 1.5,\n    bearing: 0,\n    pitch: 0,\n  });\n  const [clusterData, setClusterData] = useState(null);\n  const sourceRef = useRef();\n\n  // Get GEO data when component mounts\n  useEffect(() => {\n    const _geoData = async () => {\n      const { data } = await getGEOData();\n      const features = data.map(\n        ({\n          city,\n          coordinates: { latitude, longitude },\n          province,\n          stats: { confirmed, deaths, recovered },\n        }) => {\n          const cases = parseInt(confirmed);\n          const numDeaths = parseInt(deaths);\n          const numRecovered = parseInt(recovered);\n\n          return {\n            geometry: {\n              coordinates: [longitude, latitude],\n              type: 'Point',\n            },\n            properties: {\n              active: cases - deaths - recovered,\n              cases,\n              city,\n              country: 'USA',\n              deaths: numDeaths,\n              recovered: numRecovered,\n              state: province,\n            },\n            type: 'Feature',\n          };\n        },\n      );\n\n      setClusterData({\n        features,\n        type: 'FeatureCollection',\n      });\n    };\n\n    _geoData();\n  }, []);\n\n  const _onViewportChange = updatedViewport => setViewport(updatedViewport);\n\n  const _onClick = event => {\n    if (!(event.hasOwnProperty('features') && event.features[0])) return;\n\n    const feature = event.features[0];\n    const clusterId = feature.properties.cluster_id;\n\n    const mapboxSource = sourceRef.current.getSource();\n\n    mapboxSource.getClusterExpansionZoom(clusterId, (err, zoom) => {\n      if (err) return;\n\n      _onViewportChange({\n        latitude: feature.geometry.coordinates[1],\n        longitude: feature.geometry.coordinates[0],\n        transitionDuration: 500,\n        viewport,\n        zoom,\n      });\n    });\n  };\n\n  const clusterLayer = {\n    filter: ['all', ['has', 'active'], ['>', 'active', 0]],\n    id: 'cluster-circle',\n    paint: {\n      'circle-color': red[500],\n      'circle-opacity': 0.3,\n      'circle-radius': ['step', ['get', 'active'], 2.5, 50, 15, 375, 20],\n    },\n    source: 'cluster-circle',\n    type: 'circle',\n  };\n\n  return (\n    <MapGL\n      {...viewport}\n      dragRotate={false}\n      height=\"100%\"\n      interactiveLayerIds={[clusterLayer.id]}\n      mapStyle=\"mapbox://styles/mapbox/dark-v9\"\n      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_GL_API_TOKEN}\n      onClick={_onClick}\n      onViewportChange={_onViewportChange}\n      width=\"100%\"\n    >\n      <Source data={clusterData} ref={sourceRef} type=\"geojson\">\n        <Layer {...clusterLayer} />\n      </Source>\n    </MapGL>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}