{"ast":null,"code":"var _jsxFileName = \"/Users/chris/Desktop/covid19-confirmed/app/src/Map.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport MapGL, { Layer, Source } from 'react-map-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport red from '@material-ui/core/colors/red';\nimport { getGEOData } from './services';\nexport default function Map() {\n  const [viewport, setViewport] = useState({\n    latitude: 40.67,\n    longitude: -103.59,\n    zoom: 1.5,\n    bearing: 0,\n    pitch: 0\n  });\n  const [clusterData, setClusterData] = useState(null);\n  const sourceRef = useRef(); // Get GEO data when component mounts\n\n  useEffect(() => {\n    const _geoData = async () => {\n      const {\n        data\n      } = await getGEOData();\n      const features = data.map(({\n        city,\n        coordinates: {\n          latitude,\n          longitude\n        },\n        province,\n        stats: {\n          confirmed,\n          deaths,\n          recovered\n        }\n      }) => {\n        const cases = parseInt(confirmed);\n        const numDeaths = parseInt(deaths);\n        const numRecovered = parseInt(recovered);\n        return {\n          geometry: {\n            coordinates: [longitude, latitude],\n            type: 'Point'\n          },\n          properties: {\n            active: cases - deaths - recovered,\n            cases,\n            city,\n            country: 'USA',\n            deaths: numDeaths,\n            recovered: numRecovered,\n            state: province\n          },\n          type: 'Feature'\n        };\n      });\n      setClusterData({\n        features,\n        type: 'FeatureCollection'\n      });\n    };\n\n    _geoData();\n  }, []);\n\n  const _onViewportChange = updatedViewport => setViewport(updatedViewport);\n\n  const _onClick = event => {\n    if (!(event.hasOwnProperty('features') && event.features[0])) return;\n    const feature = event.features[0];\n    const clusterId = feature.properties.cluster_id;\n    const mapboxSource = sourceRef.current.getSource();\n    mapboxSource.getClusterExpansionZoom(clusterId, (err, zoom) => {\n      if (err) return;\n\n      _onViewportChange({\n        latitude: feature.geometry.coordinates[1],\n        longitude: feature.geometry.coordinates[0],\n        transitionDuration: 500,\n        viewport,\n        zoom\n      });\n    });\n  };\n\n  const clusterLayer = {\n    filter: ['all', ['has', 'active'], ['>', 'active', 0]],\n    id: 'cluster-circle',\n    paint: {\n      'circle-color': red[500],\n      'circle-opacity': 0.3,\n      'circle-radius': ['step', ['get', 'active'], 2.5, 50, 15, 375, 20]\n    },\n    source: 'cluster-circle',\n    type: 'circle'\n  };\n  return /*#__PURE__*/React.createElement(MapGL, Object.assign({}, viewport, {\n    dragRotate: false,\n    height: \"100%\",\n    interactiveLayerIds: [clusterLayer.id],\n    mapStyle: \"mapbox://styles/mapbox/dark-v9\",\n    mapboxApiAccessToken: process.env.REACT_APP_MAPBOX_GL_API_TOKEN,\n    onClick: _onClick,\n    onViewportChange: _onViewportChange,\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Source, {\n    data: clusterData,\n    ref: sourceRef,\n    type: \"geojson\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Layer, Object.assign({}, clusterLayer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/chris/Desktop/covid19-confirmed/app/src/Map.js"],"names":["React","useEffect","useRef","useState","MapGL","Layer","Source","red","getGEOData","Map","viewport","setViewport","latitude","longitude","zoom","bearing","pitch","clusterData","setClusterData","sourceRef","_geoData","data","features","map","city","coordinates","province","stats","confirmed","deaths","recovered","cases","parseInt","numDeaths","numRecovered","geometry","type","properties","active","country","state","_onViewportChange","updatedViewport","_onClick","event","hasOwnProperty","feature","clusterId","cluster_id","mapboxSource","current","getSource","getClusterExpansionZoom","err","transitionDuration","clusterLayer","filter","id","paint","source","process","env","REACT_APP_MAPBOX_GL_API_TOKEN"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport MapGL, { Layer, Source } from 'react-map-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport red from '@material-ui/core/colors/red';\n\nimport { getGEOData } from './services';\n\nexport default function Map() {\n  const [viewport, setViewport] = useState({\n    latitude: 40.67,\n    longitude: -103.59,\n    zoom: 1.5,\n    bearing: 0,\n    pitch: 0,\n  });\n  const [clusterData, setClusterData] = useState(null);\n  const sourceRef = useRef();\n\n  // Get GEO data when component mounts\n  useEffect(() => {\n    const _geoData = async () => {\n      const { data } = await getGEOData();\n      const features = data.map(\n        ({\n          city,\n          coordinates: { latitude, longitude },\n          province,\n          stats: { confirmed, deaths, recovered },\n        }) => {\n          const cases = parseInt(confirmed);\n          const numDeaths = parseInt(deaths);\n          const numRecovered = parseInt(recovered);\n\n          return {\n            geometry: {\n              coordinates: [longitude, latitude],\n              type: 'Point',\n            },\n            properties: {\n              active: cases - deaths - recovered,\n              cases,\n              city,\n              country: 'USA',\n              deaths: numDeaths,\n              recovered: numRecovered,\n              state: province,\n            },\n            type: 'Feature',\n          };\n        },\n      );\n\n      setClusterData({\n        features,\n        type: 'FeatureCollection',\n      });\n    };\n\n    _geoData();\n  }, []);\n\n  const _onViewportChange = updatedViewport => setViewport(updatedViewport);\n\n  const _onClick = event => {\n    if (!(event.hasOwnProperty('features') && event.features[0])) return;\n\n    const feature = event.features[0];\n    const clusterId = feature.properties.cluster_id;\n\n    const mapboxSource = sourceRef.current.getSource();\n\n    mapboxSource.getClusterExpansionZoom(clusterId, (err, zoom) => {\n      if (err) return;\n\n      _onViewportChange({\n        latitude: feature.geometry.coordinates[1],\n        longitude: feature.geometry.coordinates[0],\n        transitionDuration: 500,\n        viewport,\n        zoom,\n      });\n    });\n  };\n\n  const clusterLayer = {\n    filter: ['all', ['has', 'active'], ['>', 'active', 0]],\n    id: 'cluster-circle',\n    paint: {\n      'circle-color': red[500],\n      'circle-opacity': 0.3,\n      'circle-radius': ['step', ['get', 'active'], 2.5, 50, 15, 375, 20],\n    },\n    source: 'cluster-circle',\n    type: 'circle',\n  };\n\n  return (\n    <MapGL\n      {...viewport}\n      dragRotate={false}\n      height=\"100%\"\n      interactiveLayerIds={[clusterLayer.id]}\n      mapStyle=\"mapbox://styles/mapbox/dark-v9\"\n      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_GL_API_TOKEN}\n      onClick={_onClick}\n      onViewportChange={_onViewportChange}\n      width=\"100%\"\n    >\n      <Source data={clusterData} ref={sourceRef} type=\"geojson\">\n        <Layer {...clusterLayer} />\n      </Source>\n    </MapGL>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}