{"ast":null,"code":"var _jsxFileName = \"/Users/chris/Desktop/covid19-confirmed/app/src/Dashboard.js\";\nimport React, { useEffect, useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport grey from '@material-ui/core/colors/grey';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { HorizontalGridLines, LineMarkSeries, VerticalGridLines, XAxis, XYPlot, YAxis } from 'react-vis';\nimport { DataTable } from './DataTable';\nimport { getCountries, getHistory } from './services';\nimport { rootStyles } from './App';\nconst useStyles = makeStyles(() => ({\n  divider: {\n    marginBottom: '16px'\n  },\n  header: {\n    marginBottom: '12px'\n  },\n  root: { ...rootStyles,\n    backgroundColor: grey[100]\n  }\n}));\nexport function Dashboard() {\n  const classes = useStyles();\n  const [countryTableBodyRows, setCountryTableBodyRows] = useState([]);\n  const [todayTableBodyRows, setTodayTableBodyRows] = useState([]);\n  const [history, setHistory] = useState([]); // Get data for tables and charts when component mounts\n\n  useEffect(() => {\n    const _countryData = async () => {\n      const {\n        data\n      } = await getCountries();\n      const countryTableData = data.map(({\n        active,\n        cases,\n        country,\n        deaths,\n        recovered\n      }) => ({\n        id: country,\n        country,\n        active,\n        deaths,\n        recovered,\n        cases\n      }));\n      setCountryTableBodyRows(countryTableData);\n      const todayTableData = data.map(({\n        country,\n        todayCases,\n        todayDeaths\n      }) => ({\n        id: country,\n        country,\n        todayDeaths,\n        todayCases\n      }));\n      setTodayTableBodyRows(todayTableData);\n    };\n\n    const _historyData = async () => {\n      const {\n        data\n      } = await getHistory();\n      setHistory(data);\n    };\n\n    _countryData();\n\n    _historyData();\n  }, []); // eslint-disable-line\n\n  const countryTableHeadCells = [{\n    id: 'country',\n    label: 'Country'\n  }, {\n    id: 'active',\n    label: 'Active Cases'\n  }, {\n    id: 'deaths',\n    label: 'Deaths'\n  }, {\n    id: 'recovered',\n    label: 'Recovered'\n  }, {\n    id: 'cases',\n    label: 'Total Confirmed'\n  }];\n  const todayTableHeadCells = [{\n    id: 'country',\n    label: 'Country'\n  }, {\n    id: 'todayDeaths',\n    label: 'Deaths'\n  }, {\n    id: 'todayCases',\n    label: 'Cases'\n  }];\n  return /*#__PURE__*/React.createElement(\"article\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DashboardHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, \"Country Overview\"), /*#__PURE__*/React.createElement(DataTable, {\n    bodyRows: countryTableBodyRows,\n    headCells: countryTableHeadCells,\n    initialOrder: \"desc\",\n    initialOrderBy: \"active\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 5,\n    lg: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DashboardHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, \"Confirmed Today\"), /*#__PURE__*/React.createElement(DataTable, {\n    bodyRows: todayTableBodyRows,\n    headCells: todayTableHeadCells,\n    initialOrder: \"desc\",\n    initialOrderBy: \"todayCases\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  })))));\n}\n\nfunction DashboardHeader({\n  children\n}) {\n  // const classes = useStyles();\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.header,\n    component: \"h2\",\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, children), /*#__PURE__*/React.createElement(Divider, {\n    className: classes.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction LineChart(props) {\n  return /*#__PURE__*/React.createElement(XYPlot, {\n    width: 300,\n    height: 300,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(VerticalGridLines, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(HorizontalGridLines, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(LineMarkSeries, {\n    className: \"linemark-series-example\",\n    style: {\n      strokeWidth: '3px'\n    },\n    lineStyle: {\n      stroke: 'red'\n    },\n    markStyle: {\n      stroke: 'blue'\n    },\n    data: [{\n      x: 1,\n      y: 10\n    }, {\n      x: 2,\n      y: 5\n    }, {\n      x: 3,\n      y: 15\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(LineMarkSeries, {\n    className: \"linemark-series-example-2\",\n    curve: 'curveMonotoneX',\n    data: [{\n      x: 1,\n      y: 11\n    }, {\n      x: 1.5,\n      y: 29\n    }, {\n      x: 3,\n      y: 7\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/chris/Desktop/covid19-confirmed/app/src/Dashboard.js"],"names":["React","useEffect","useState","Container","Divider","Grid","Typography","grey","makeStyles","HorizontalGridLines","LineMarkSeries","VerticalGridLines","XAxis","XYPlot","YAxis","DataTable","getCountries","getHistory","rootStyles","useStyles","divider","marginBottom","header","root","backgroundColor","Dashboard","classes","countryTableBodyRows","setCountryTableBodyRows","todayTableBodyRows","setTodayTableBodyRows","history","setHistory","_countryData","data","countryTableData","map","active","cases","country","deaths","recovered","id","todayTableData","todayCases","todayDeaths","_historyData","countryTableHeadCells","label","todayTableHeadCells","DashboardHeader","children","LineChart","props","strokeWidth","stroke","x","y"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport grey from '@material-ui/core/colors/grey';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  HorizontalGridLines,\n  LineMarkSeries,\n  VerticalGridLines,\n  XAxis,\n  XYPlot,\n  YAxis,\n} from 'react-vis';\n\nimport { DataTable } from './DataTable';\nimport { getCountries, getHistory } from './services';\nimport { rootStyles } from './App';\n\nconst useStyles = makeStyles(() => ({\n  divider: {\n    marginBottom: '16px',\n  },\n  header: {\n    marginBottom: '12px',\n  },\n  root: {\n    ...rootStyles,\n    backgroundColor: grey[100],\n  },\n}));\n\nexport function Dashboard() {\n  const classes = useStyles();\n\n  const [countryTableBodyRows, setCountryTableBodyRows] = useState([]);\n  const [todayTableBodyRows, setTodayTableBodyRows] = useState([]);\n  const [history, setHistory] = useState([]);\n\n  // Get data for tables and charts when component mounts\n  useEffect(() => {\n    const _countryData = async () => {\n      const { data } = await getCountries();\n\n      const countryTableData = data.map(\n        ({ active, cases, country, deaths, recovered }) => ({\n          id: country,\n          country,\n          active,\n          deaths,\n          recovered,\n          cases,\n        }),\n      );\n      setCountryTableBodyRows(countryTableData);\n\n      const todayTableData = data.map(\n        ({ country, todayCases, todayDeaths }) => ({\n          id: country,\n          country,\n          todayDeaths,\n          todayCases,\n        }),\n      );\n      setTodayTableBodyRows(todayTableData);\n    };\n\n    const _historyData = async () => {\n      const { data } = await getHistory();\n      setHistory(data);\n    };\n\n    _countryData();\n    _historyData();\n  }, []); // eslint-disable-line\n\n  const countryTableHeadCells = [\n    { id: 'country', label: 'Country' },\n    {\n      id: 'active',\n      label: 'Active Cases',\n    },\n    { id: 'deaths', label: 'Deaths' },\n    { id: 'recovered', label: 'Recovered' },\n    { id: 'cases', label: 'Total Confirmed' },\n  ];\n  const todayTableHeadCells = [\n    { id: 'country', label: 'Country' },\n    { id: 'todayDeaths', label: 'Deaths' },\n    { id: 'todayCases', label: 'Cases' },\n  ];\n\n  return (\n    <article className={classes.root}>\n      <Container>\n        <Grid container spacing={3}>\n          {/* Country overview table */}\n          <Grid item xs={12}>\n            <DashboardHeader>Country Overview</DashboardHeader>\n\n            <DataTable\n              bodyRows={countryTableBodyRows}\n              headCells={countryTableHeadCells}\n              initialOrder=\"desc\"\n              initialOrderBy=\"active\"\n            />\n          </Grid>\n\n          {/* Today table */}\n          <Grid item xs={12} md={5} lg={4}>\n            <DashboardHeader>Confirmed Today</DashboardHeader>\n\n            <DataTable\n              bodyRows={todayTableBodyRows}\n              headCells={todayTableHeadCells}\n              initialOrder=\"desc\"\n              initialOrderBy=\"todayCases\"\n            />\n          </Grid>\n        </Grid>\n      </Container>\n    </article>\n  );\n}\n\nfunction DashboardHeader({ children }) {\n  // const classes = useStyles();\n\n  return (\n    <>\n      <Typography className={classes.header} component=\"h2\" variant=\"h5\">\n        {children}\n      </Typography>\n      <Divider className={classes.divider} />\n    </>\n  );\n}\n\nfunction LineChart(props) {\n  return (\n    <XYPlot width={300} height={300}>\n      <VerticalGridLines />\n      <HorizontalGridLines />\n      <XAxis />\n      <YAxis />\n      <LineMarkSeries\n        className=\"linemark-series-example\"\n        style={{\n          strokeWidth: '3px',\n        }}\n        lineStyle={{ stroke: 'red' }}\n        markStyle={{ stroke: 'blue' }}\n        data={[\n          { x: 1, y: 10 },\n          { x: 2, y: 5 },\n          { x: 3, y: 15 },\n        ]}\n      />\n      <LineMarkSeries\n        className=\"linemark-series-example-2\"\n        curve={'curveMonotoneX'}\n        data={[\n          { x: 1, y: 11 },\n          { x: 1.5, y: 29 },\n          { x: 3, y: 7 },\n        ]}\n      />\n    </XYPlot>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}