{"ast":null,"code":"var _jsxFileName = \"/Users/chris/Desktop/covid19-confirmed/app/src/Map.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport MapGL, { Layer, Source } from 'react-map-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { getCountryData, getUSAData } from './services';\nexport function Map() {\n  const [viewport, setViewport] = useState({\n    latitude: 40.67,\n    longitude: -103.59,\n    zoom: 1,\n    bearing: 0,\n    pitch: 0\n  });\n  const [clusterData, setClusterData] = useState(null);\n  const sourceRef = useRef(); // Get GEO data when component mounts\n\n  useEffect(() => {\n    const _geoData = async () => {\n      const {\n        data: countryData\n      } = await getCountryData();\n      const formattedCountryData = countryData.filter(({\n        country\n      }) => country !== 'USA').map(({\n        cases,\n        country,\n        countryInfo: {\n          lat,\n          long\n        },\n        deaths,\n        recovered\n      }) => ({\n        geometry: {\n          coordinates: [long, lat],\n          type: 'Point'\n        },\n        properties: {\n          cases,\n          country,\n          deaths,\n          recovered\n        },\n        type: 'Feature'\n      }));\n      const {\n        data: usaData\n      } = await getUSAData();\n      const formattedUSAData = usaData.map(({\n        city,\n        coordinates: {\n          latitude,\n          longitude\n        },\n        province,\n        stats: {\n          confirmed,\n          deaths,\n          recovered\n        }\n      }) => ({\n        geometry: {\n          coordinates: [longitude, latitude],\n          type: 'Point'\n        },\n        properties: {\n          cases: parseInt(confirmed),\n          city,\n          country: 'USA',\n          deaths: parseInt(deaths),\n          recovered: parseInt(recovered),\n          state: province\n        },\n        type: 'Feature'\n      }));\n      setClusterData({\n        features: [...formattedCountryData, ...formattedUSAData],\n        type: 'FeatureCollection'\n      });\n    };\n\n    _geoData();\n  }, []);\n\n  const _onViewportChange = updatedViewport => setViewport(updatedViewport);\n\n  const _onClick = event => {\n    if (!(event.hasOwnProperty('features') && event.features[0])) return;\n    const feature = event.features[0];\n    const clusterId = feature.properties.cluster_id;\n    const mapboxSource = sourceRef.current.getSource();\n    mapboxSource.getClusterExpansionZoom(clusterId, (err, zoom) => {\n      if (err) return;\n\n      _onViewportChange({\n        latitude: feature.geometry.coordinates[1],\n        longitude: feature.geometry.coordinates[0],\n        transitionDuration: 500,\n        viewport,\n        zoom\n      });\n    });\n  };\n\n  const clusterLayer = {\n    filter: ['all', ['has', 'cases'], ['>', 'cases', 0]],\n    id: 'cluster-circle',\n    // paint: {\n    //   'circle-color': '#f44336',\n    //   'circle-opacity': 0.075,\n    //   'circle-radius': ['step', ['get', 'cases'], 20, 100, 30, 750, 40],\n    // },\n    paint: {\n      // Increase the heatmap weight based on frequency and property magnitude\n      'heatmap-weight': ['interpolate', ['linear'], ['get', 'cases'], 0, 0, 6, 1],\n      // Increase the heatmap color weight weight by zoom level\n      // heatmap-intensity is a multiplier on top of heatmap-weight\n      'heatmap-intensity': ['interpolate', ['linear'], ['zoom'], 0, 1, 9, 3],\n      // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\n      // Begin color ramp at 0-stop with a 0-transparancy color\n      // to create a blur-like effect.\n      'heatmap-color': ['interpolate', ['linear'], ['heatmap-density'], 0, 'rgba(33,102,172,0)', 0.2, 'rgb(103,169,207)', 0.4, 'rgb(209,229,240)', 0.6, 'rgb(253,219,199)', 0.8, 'rgb(239,138,98)', 1, 'rgb(178,24,43)'],\n      // Adjust the heatmap radius by zoom level\n      'heatmap-radius': ['interpolate', ['linear'], ['zoom'], 0, 2, 9, 20],\n      // Transition from heatmap to circle layer by zoom level\n      'heatmap-opacity': ['interpolate', ['linear'], ['zoom'], 7, 1, 9, 0]\n    },\n    source: 'cluster-circle',\n    type: 'circle'\n  };\n  return /*#__PURE__*/React.createElement(MapGL, Object.assign({}, viewport, {\n    dragRotate: false,\n    height: \"100%\",\n    interactiveLayerIds: [clusterLayer.id],\n    mapStyle: \"mapbox://styles/mapbox/dark-v9\",\n    mapboxApiAccessToken: process.env.REACT_APP_MAPBOX_GL_API_TOKEN,\n    onClick: _onClick,\n    onViewportChange: _onViewportChange,\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Source, {\n    clusterMaxZoom: 5,\n    clusterRadius: 32,\n    data: clusterData,\n    ref: sourceRef,\n    type: \"geojson\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Layer, Object.assign({}, clusterLayer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/chris/Desktop/covid19-confirmed/app/src/Map.js"],"names":["React","useEffect","useRef","useState","MapGL","Layer","Source","getCountryData","getUSAData","Map","viewport","setViewport","latitude","longitude","zoom","bearing","pitch","clusterData","setClusterData","sourceRef","_geoData","data","countryData","formattedCountryData","filter","country","map","cases","countryInfo","lat","long","deaths","recovered","geometry","coordinates","type","properties","usaData","formattedUSAData","city","province","stats","confirmed","parseInt","state","features","_onViewportChange","updatedViewport","_onClick","event","hasOwnProperty","feature","clusterId","cluster_id","mapboxSource","current","getSource","getClusterExpansionZoom","err","transitionDuration","clusterLayer","id","paint","source","process","env","REACT_APP_MAPBOX_GL_API_TOKEN"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport MapGL, { Layer, Source } from 'react-map-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nimport { getCountryData, getUSAData } from './services';\n\nexport function Map() {\n  const [viewport, setViewport] = useState({\n    latitude: 40.67,\n    longitude: -103.59,\n    zoom: 1,\n    bearing: 0,\n    pitch: 0,\n  });\n  const [clusterData, setClusterData] = useState(null);\n  const sourceRef = useRef();\n\n  // Get GEO data when component mounts\n  useEffect(() => {\n    const _geoData = async () => {\n      const { data: countryData } = await getCountryData();\n      const formattedCountryData = countryData\n        .filter(({ country }) => country !== 'USA')\n        .map(\n          ({\n            cases,\n            country,\n            countryInfo: { lat, long },\n            deaths,\n            recovered,\n          }) => ({\n            geometry: {\n              coordinates: [long, lat],\n              type: 'Point',\n            },\n            properties: {\n              cases,\n              country,\n              deaths,\n              recovered,\n            },\n            type: 'Feature',\n          }),\n        );\n\n      const { data: usaData } = await getUSAData();\n      const formattedUSAData = usaData.map(\n        ({\n          city,\n          coordinates: { latitude, longitude },\n          province,\n          stats: { confirmed, deaths, recovered },\n        }) => ({\n          geometry: {\n            coordinates: [longitude, latitude],\n            type: 'Point',\n          },\n          properties: {\n            cases: parseInt(confirmed),\n            city,\n            country: 'USA',\n            deaths: parseInt(deaths),\n            recovered: parseInt(recovered),\n            state: province,\n          },\n          type: 'Feature',\n        }),\n      );\n\n      setClusterData({\n        features: [...formattedCountryData, ...formattedUSAData],\n        type: 'FeatureCollection',\n      });\n    };\n\n    _geoData();\n  }, []);\n\n  const _onViewportChange = updatedViewport => setViewport(updatedViewport);\n\n  const _onClick = event => {\n    if (!(event.hasOwnProperty('features') && event.features[0])) return;\n\n    const feature = event.features[0];\n    const clusterId = feature.properties.cluster_id;\n\n    const mapboxSource = sourceRef.current.getSource();\n\n    mapboxSource.getClusterExpansionZoom(clusterId, (err, zoom) => {\n      if (err) return;\n\n      _onViewportChange({\n        latitude: feature.geometry.coordinates[1],\n        longitude: feature.geometry.coordinates[0],\n        transitionDuration: 500,\n        viewport,\n        zoom,\n      });\n    });\n  };\n\n  const clusterLayer = {\n    filter: ['all', ['has', 'cases'], ['>', 'cases', 0]],\n    id: 'cluster-circle',\n    // paint: {\n    //   'circle-color': '#f44336',\n    //   'circle-opacity': 0.075,\n    //   'circle-radius': ['step', ['get', 'cases'], 20, 100, 30, 750, 40],\n    // },\n    paint: {\n      // Increase the heatmap weight based on frequency and property magnitude\n      'heatmap-weight': [\n        'interpolate',\n        ['linear'],\n        ['get', 'cases'],\n        0,\n        0,\n        6,\n        1,\n      ],\n      // Increase the heatmap color weight weight by zoom level\n      // heatmap-intensity is a multiplier on top of heatmap-weight\n      'heatmap-intensity': ['interpolate', ['linear'], ['zoom'], 0, 1, 9, 3],\n      // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\n      // Begin color ramp at 0-stop with a 0-transparancy color\n      // to create a blur-like effect.\n      'heatmap-color': [\n        'interpolate',\n        ['linear'],\n        ['heatmap-density'],\n        0,\n        'rgba(33,102,172,0)',\n        0.2,\n        'rgb(103,169,207)',\n        0.4,\n        'rgb(209,229,240)',\n        0.6,\n        'rgb(253,219,199)',\n        0.8,\n        'rgb(239,138,98)',\n        1,\n        'rgb(178,24,43)',\n      ],\n      // Adjust the heatmap radius by zoom level\n      'heatmap-radius': ['interpolate', ['linear'], ['zoom'], 0, 2, 9, 20],\n      // Transition from heatmap to circle layer by zoom level\n      'heatmap-opacity': ['interpolate', ['linear'], ['zoom'], 7, 1, 9, 0],\n    },\n    source: 'cluster-circle',\n    type: 'circle',\n  };\n\n  return (\n    <MapGL\n      {...viewport}\n      dragRotate={false}\n      height=\"100%\"\n      interactiveLayerIds={[clusterLayer.id]}\n      mapStyle=\"mapbox://styles/mapbox/dark-v9\"\n      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_GL_API_TOKEN}\n      onClick={_onClick}\n      onViewportChange={_onViewportChange}\n      width=\"100%\"\n    >\n      <Source\n        clusterMaxZoom={5}\n        clusterRadius={32}\n        data={clusterData}\n        ref={sourceRef}\n        type=\"geojson\"\n      >\n        <Layer {...clusterLayer} />\n      </Source>\n    </MapGL>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}