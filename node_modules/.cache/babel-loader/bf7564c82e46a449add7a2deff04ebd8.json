{"ast":null,"code":"import React, { useEffect, useRef, useState } from 'react';\nimport MapGL, { Layer, Source } from 'react-map-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { getCountryData } from './services';\nimport { clusterCountLayer, clusterLayer } from './Map.constants';\nexport function Map() {\n  const [viewport, setViewport] = useState({\n    latitude: 40.67,\n    longitude: -103.59,\n    zoom: 1,\n    bearing: 0,\n    pitch: 0\n  });\n  const [clusterData, setClusterData] = useState({});\n  const sourceRef = useRef();\n  useEffect(() => {\n    const _geoJSONData = async () => {\n      const {\n        data\n      } = await getCountryData();\n      return data.map(({\n        cases,\n        countryInfo: {\n          lat,\n          long\n        }\n      }) => ({\n        geometry: {\n          coordinates: [lat, long],\n          type: 'Point'\n        },\n        type: 'Feature'\n      }));\n    };\n\n    const formattedClusterData = _geoJSONData();\n\n    setClusterData(formattedClusterData);\n    console.log(formattedClusterData);\n    debugger;\n  }, []);\n\n  const _onViewportChange = updatedViewport => setViewport(updatedViewport);\n\n  const _onClick = event => {\n    if (!(event.hasOwnProperty('features') && event.features[0])) return;\n    const feature = event.features[0];\n    const clusterId = feature.properties.cluster_id;\n    const mapboxSource = sourceRef.current.getSource();\n    mapboxSource.getClusterExpansionZoom(clusterId, (err, zoom) => {\n      if (err) return;\n\n      _onViewportChange({\n        latitude: feature.geometry.coordinates[1],\n        longitude: feature.geometry.coordinates[0],\n        transitionDuration: 500,\n        viewport,\n        zoom\n      });\n    });\n  }; // return (\n  //   <MapGL\n  //     {...viewport}\n  //     dragRotate={false}\n  //     height=\"100%\"\n  //     interactiveLayerIds={[clusterLayer.id]}\n  //     mapStyle=\"mapbox://styles/mapbox/dark-v9\"\n  //     mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_GL_API_TOKEN}\n  //     onClick={_onClick}\n  //     onViewportChange={_onViewportChange}\n  //     width=\"100%\"\n  //   >\n  //     <Source\n  //       cluster={true}\n  //       clusterMaxZoom={14}\n  //       clusterRadius={50}\n  //       data={clusterData}\n  //       ref={sourceRef}\n  //       type=\"geojson\"\n  //     >\n  //       <Layer {...clusterLayer} />\n  //       <Layer {...clusterCountLayer} />\n  //     </Source>\n  //   </MapGL>\n  // );\n\n\n  return null;\n}","map":{"version":3,"sources":["/Users/chris/Desktop/covid19-confirmed/app/src/Map.js"],"names":["React","useEffect","useRef","useState","MapGL","Layer","Source","getCountryData","clusterCountLayer","clusterLayer","Map","viewport","setViewport","latitude","longitude","zoom","bearing","pitch","clusterData","setClusterData","sourceRef","_geoJSONData","data","map","cases","countryInfo","lat","long","geometry","coordinates","type","formattedClusterData","console","log","_onViewportChange","updatedViewport","_onClick","event","hasOwnProperty","features","feature","clusterId","properties","cluster_id","mapboxSource","current","getSource","getClusterExpansionZoom","err","transitionDuration"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,KAAP,IAAgBC,KAAhB,EAAuBC,MAAvB,QAAqC,cAArC;AACA,OAAO,8BAAP;AAEA,SAASC,cAAT,QAA+B,YAA/B;AACA,SAASC,iBAAT,EAA4BC,YAA5B,QAAgD,iBAAhD;AAEA,OAAO,SAASC,GAAT,GAAe;AACpB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC;AACvCU,IAAAA,QAAQ,EAAE,KAD6B;AAEvCC,IAAAA,SAAS,EAAE,CAAC,MAF2B;AAGvCC,IAAAA,IAAI,EAAE,CAHiC;AAIvCC,IAAAA,OAAO,EAAE,CAJ8B;AAKvCC,IAAAA,KAAK,EAAE;AALgC,GAAD,CAAxC;AAOA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAMiB,SAAS,GAAGlB,MAAM,EAAxB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMoB,YAAY,GAAG,YAAY;AAC/B,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMf,cAAc,EAArC;AAEA,aAAOe,IAAI,CAACC,GAAL,CAAS,CAAC;AAAEC,QAAAA,KAAF;AAASC,QAAAA,WAAW,EAAE;AAAEC,UAAAA,GAAF;AAAOC,UAAAA;AAAP;AAAtB,OAAD,MAA4C;AAC1DC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,WAAW,EAAE,CAACH,GAAD,EAAMC,IAAN,CADL;AAERG,UAAAA,IAAI,EAAE;AAFE,SADgD;AAK1DA,QAAAA,IAAI,EAAE;AALoD,OAA5C,CAAT,CAAP;AAOD,KAVD;;AAYA,UAAMC,oBAAoB,GAAGV,YAAY,EAAzC;;AACAF,IAAAA,cAAc,CAACY,oBAAD,CAAd;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,oBAAZ;AACA;AACD,GAlBQ,EAkBN,EAlBM,CAAT;;AAoBA,QAAMG,iBAAiB,GAAGC,eAAe,IAAIvB,WAAW,CAACuB,eAAD,CAAxD;;AAEA,QAAMC,QAAQ,GAAGC,KAAK,IAAI;AACxB,QAAI,EAAEA,KAAK,CAACC,cAAN,CAAqB,UAArB,KAAoCD,KAAK,CAACE,QAAN,CAAe,CAAf,CAAtC,CAAJ,EAA8D;AAE9D,UAAMC,OAAO,GAAGH,KAAK,CAACE,QAAN,CAAe,CAAf,CAAhB;AACA,UAAME,SAAS,GAAGD,OAAO,CAACE,UAAR,CAAmBC,UAArC;AAEA,UAAMC,YAAY,GAAGxB,SAAS,CAACyB,OAAV,CAAkBC,SAAlB,EAArB;AAEAF,IAAAA,YAAY,CAACG,uBAAb,CAAqCN,SAArC,EAAgD,CAACO,GAAD,EAAMjC,IAAN,KAAe;AAC7D,UAAIiC,GAAJ,EAAS;;AAETd,MAAAA,iBAAiB,CAAC;AAChBrB,QAAAA,QAAQ,EAAE2B,OAAO,CAACZ,QAAR,CAAiBC,WAAjB,CAA6B,CAA7B,CADM;AAEhBf,QAAAA,SAAS,EAAE0B,OAAO,CAACZ,QAAR,CAAiBC,WAAjB,CAA6B,CAA7B,CAFK;AAGhBoB,QAAAA,kBAAkB,EAAE,GAHJ;AAIhBtC,QAAAA,QAJgB;AAKhBI,QAAAA;AALgB,OAAD,CAAjB;AAOD,KAVD;AAWD,GAnBD,CAjCoB,CAsDpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAAO,IAAP;AACD","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport MapGL, { Layer, Source } from 'react-map-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nimport { getCountryData } from './services';\nimport { clusterCountLayer, clusterLayer } from './Map.constants';\n\nexport function Map() {\n  const [viewport, setViewport] = useState({\n    latitude: 40.67,\n    longitude: -103.59,\n    zoom: 1,\n    bearing: 0,\n    pitch: 0,\n  });\n  const [clusterData, setClusterData] = useState({});\n  const sourceRef = useRef();\n\n  useEffect(() => {\n    const _geoJSONData = async () => {\n      const { data } = await getCountryData();\n\n      return data.map(({ cases, countryInfo: { lat, long } }) => ({\n        geometry: {\n          coordinates: [lat, long],\n          type: 'Point',\n        },\n        type: 'Feature',\n      }));\n    };\n\n    const formattedClusterData = _geoJSONData();\n    setClusterData(formattedClusterData);\n\n    console.log(formattedClusterData);\n    debugger;\n  }, []);\n\n  const _onViewportChange = updatedViewport => setViewport(updatedViewport);\n\n  const _onClick = event => {\n    if (!(event.hasOwnProperty('features') && event.features[0])) return;\n\n    const feature = event.features[0];\n    const clusterId = feature.properties.cluster_id;\n\n    const mapboxSource = sourceRef.current.getSource();\n\n    mapboxSource.getClusterExpansionZoom(clusterId, (err, zoom) => {\n      if (err) return;\n\n      _onViewportChange({\n        latitude: feature.geometry.coordinates[1],\n        longitude: feature.geometry.coordinates[0],\n        transitionDuration: 500,\n        viewport,\n        zoom,\n      });\n    });\n  };\n\n  // return (\n  //   <MapGL\n  //     {...viewport}\n  //     dragRotate={false}\n  //     height=\"100%\"\n  //     interactiveLayerIds={[clusterLayer.id]}\n  //     mapStyle=\"mapbox://styles/mapbox/dark-v9\"\n  //     mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_GL_API_TOKEN}\n  //     onClick={_onClick}\n  //     onViewportChange={_onViewportChange}\n  //     width=\"100%\"\n  //   >\n  //     <Source\n  //       cluster={true}\n  //       clusterMaxZoom={14}\n  //       clusterRadius={50}\n  //       data={clusterData}\n  //       ref={sourceRef}\n  //       type=\"geojson\"\n  //     >\n  //       <Layer {...clusterLayer} />\n  //       <Layer {...clusterCountLayer} />\n  //     </Source>\n  //   </MapGL>\n  // );\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}