{"ast":null,"code":"var _jsxFileName = \"/Users/chris/Desktop/covid19-confirmed/app/src/Map.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport { fromJS } from 'immutable';\nimport MapGL, { Layer, Source } from 'react-map-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { getCountryData } from './services';\nimport { clusterCountLayer, clusterLayer } from './Map.constants';\nexport function Map() {\n  const [viewport, setViewport] = useState({\n    latitude: 40.67,\n    longitude: -103.59,\n    zoom: 1,\n    bearing: 0,\n    pitch: 0\n  });\n  const [clusterData, setClusterData] = useState({});\n  const sourceRef = useRef();\n  useEffect(() => {\n    const _geoData = async () => {\n      const {\n        data\n      } = await getCountryData();\n      return {\n        features: data.map(({\n          cases,\n          countryInfo: {\n            lat,\n            long\n          }\n        }) => ({\n          geometry: {\n            coordinates: [lat, long],\n            type: 'Point'\n          },\n          type: 'Feature'\n        })),\n        type: 'FeatureCollection'\n      };\n    };\n\n    const formattedClusterData = _geoData();\n\n    setClusterData(formattedClusterData);\n  }, []);\n\n  const _onViewportChange = updatedViewport => setViewport(updatedViewport);\n\n  const _onClick = event => {\n    if (!(event.hasOwnProperty('features') && event.features[0])) return;\n    const feature = event.features[0];\n    const clusterId = feature.properties.cluster_id;\n    const mapboxSource = sourceRef.current.getSource();\n    mapboxSource.getClusterExpansionZoom(clusterId, (err, zoom) => {\n      if (err) return;\n\n      _onViewportChange({\n        latitude: feature.geometry.coordinates[1],\n        longitude: feature.geometry.coordinates[0],\n        transitionDuration: 500,\n        viewport,\n        zoom\n      });\n    });\n  };\n\n  const mapStyle = fromJS({\n    version: 8,\n    sources: {\n      points: {\n        type: 'geojson',\n        data: clusterData.slice(0, 9)\n      }\n    },\n    layers: [clusterCountLayer, clusterLayer]\n  });\n  return /*#__PURE__*/React.createElement(MapGL, Object.assign({}, viewport, {\n    dragRotate: false,\n    height: \"100%\",\n    interactiveLayerIds: [clusterLayer.id] // mapStyle=\"mapbox://styles/mapbox/dark-v9\"\n    ,\n    mapStyle: mapStyle,\n    mapboxApiAccessToken: process.env.REACT_APP_MAPBOX_GL_API_TOKEN,\n    onClick: _onClick,\n    onViewportChange: _onViewportChange,\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Source, {\n    cluster: true,\n    clusterMaxZoom: 14,\n    clusterRadius: 50,\n    data: clusterData,\n    ref: sourceRef,\n    type: \"geojson\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Layer, Object.assign({}, clusterLayer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Layer, Object.assign({}, clusterCountLayer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/chris/Desktop/covid19-confirmed/app/src/Map.js"],"names":["React","useEffect","useRef","useState","fromJS","MapGL","Layer","Source","getCountryData","clusterCountLayer","clusterLayer","Map","viewport","setViewport","latitude","longitude","zoom","bearing","pitch","clusterData","setClusterData","sourceRef","_geoData","data","features","map","cases","countryInfo","lat","long","geometry","coordinates","type","formattedClusterData","_onViewportChange","updatedViewport","_onClick","event","hasOwnProperty","feature","clusterId","properties","cluster_id","mapboxSource","current","getSource","getClusterExpansionZoom","err","transitionDuration","mapStyle","version","sources","points","slice","layers","id","process","env","REACT_APP_MAPBOX_GL_API_TOKEN"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { fromJS } from 'immutable';\nimport MapGL, { Layer, Source } from 'react-map-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nimport { getCountryData } from './services';\nimport { clusterCountLayer, clusterLayer } from './Map.constants';\n\nexport function Map() {\n  const [viewport, setViewport] = useState({\n    latitude: 40.67,\n    longitude: -103.59,\n    zoom: 1,\n    bearing: 0,\n    pitch: 0,\n  });\n  const [clusterData, setClusterData] = useState({});\n  const sourceRef = useRef();\n\n  useEffect(() => {\n    const _geoData = async () => {\n      const { data } = await getCountryData();\n\n      return {\n        features: data.map(({ cases, countryInfo: { lat, long } }) => ({\n          geometry: {\n            coordinates: [lat, long],\n            type: 'Point',\n          },\n          type: 'Feature',\n        })),\n        type: 'FeatureCollection',\n      };\n    };\n\n    const formattedClusterData = _geoData();\n    setClusterData(formattedClusterData);\n  }, []);\n\n  const _onViewportChange = updatedViewport => setViewport(updatedViewport);\n\n  const _onClick = event => {\n    if (!(event.hasOwnProperty('features') && event.features[0])) return;\n\n    const feature = event.features[0];\n    const clusterId = feature.properties.cluster_id;\n\n    const mapboxSource = sourceRef.current.getSource();\n\n    mapboxSource.getClusterExpansionZoom(clusterId, (err, zoom) => {\n      if (err) return;\n\n      _onViewportChange({\n        latitude: feature.geometry.coordinates[1],\n        longitude: feature.geometry.coordinates[0],\n        transitionDuration: 500,\n        viewport,\n        zoom,\n      });\n    });\n  };\n\n  const mapStyle = fromJS({\n    version: 8,\n    sources: {\n      points: {\n        type: 'geojson',\n        data: clusterData.slice(0, 9),\n      },\n    },\n    layers: [clusterCountLayer, clusterLayer],\n  });\n\n  return (\n    <MapGL\n      {...viewport}\n      dragRotate={false}\n      height=\"100%\"\n      interactiveLayerIds={[clusterLayer.id]}\n      // mapStyle=\"mapbox://styles/mapbox/dark-v9\"\n      mapStyle={mapStyle}\n      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_GL_API_TOKEN}\n      onClick={_onClick}\n      onViewportChange={_onViewportChange}\n      width=\"100%\"\n    >\n      <Source\n        cluster={true}\n        clusterMaxZoom={14}\n        clusterRadius={50}\n        data={clusterData}\n        ref={sourceRef}\n        type=\"geojson\"\n      >\n        <Layer {...clusterLayer} />\n        <Layer {...clusterCountLayer} />\n      </Source>\n    </MapGL>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}