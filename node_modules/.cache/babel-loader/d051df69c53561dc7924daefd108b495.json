{"ast":null,"code":"var _jsxFileName = \"/Users/chris/Desktop/covid19-confirmed/app/src/HistoryChart.js\";\nimport React, { useState } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { ChartLabel, Crosshair, FlexibleWidthXYPlot, HorizontalGridLines, LineSeries, VerticalGridLines, XAxis, YAxis } from 'react-vis';\nimport moment from 'moment';\nimport numeral from 'numeral';\nexport default function HistoryChart({\n  height,\n  history\n}) {\n  const [crosshairValue, setCrosshairValue] = useState(null);\n\n  const _formatDate = date => moment(date).format('MM/DD/YYYY');\n\n  if (!history.length) return null;\n  return /*#__PURE__*/React.createElement(FlexibleWidthXYPlot, {\n    height: height,\n    onMouseLeave: () => {\n      setCrosshairValue(null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(VerticalGridLines, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(HorizontalGridLines, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ChartLabel, {\n    includeMargin: false,\n    text: \"Date\",\n    xPercent: 0.015,\n    yPercent: 1.01,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    tickFormat: _formatDate,\n    tickTotal: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ChartLabel, {\n    includeMargin: false,\n    style: {\n      transform: 'rotate(-90)',\n      textAnchor: 'end'\n    },\n    text: \"# Cases\",\n    xPercent: 0.03,\n    yPercent: 0.06,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    tickFormat: y => numeral(y).format('0a'),\n    tickTotal: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }), history.map(({\n    timeline: {\n      cases\n    }\n  }) => {\n    const data = Object.keys(cases).map(date => ({\n      x: moment(date).valueOf(),\n      y: cases[date]\n    }));\n    return /*#__PURE__*/React.createElement(LineSeries, {\n      curve: 'curveMonotoneX',\n      data: data,\n      onNearestX: d => {\n        setCrosshairValue(d);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    });\n  }), crosshairValue && /*#__PURE__*/React.createElement(Crosshair, {\n    values: [crosshairValue],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    component: \"p\",\n    variant: \"body2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, \"Date: \", _formatDate(crosshairValue.x)), /*#__PURE__*/React.createElement(Typography, {\n    component: \"p\",\n    variant: \"body2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, \"# Cases: \", numeral(crosshairValue.y).format('0,0')))));\n}","map":{"version":3,"sources":["/Users/chris/Desktop/covid19-confirmed/app/src/HistoryChart.js"],"names":["React","useState","Paper","Typography","ChartLabel","Crosshair","FlexibleWidthXYPlot","HorizontalGridLines","LineSeries","VerticalGridLines","XAxis","YAxis","moment","numeral","HistoryChart","height","history","crosshairValue","setCrosshairValue","_formatDate","date","format","length","transform","textAnchor","y","map","timeline","cases","data","Object","keys","x","valueOf","d"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport {\n  ChartLabel,\n  Crosshair,\n  FlexibleWidthXYPlot,\n  HorizontalGridLines,\n  LineSeries,\n  VerticalGridLines,\n  XAxis,\n  YAxis,\n} from 'react-vis';\nimport moment from 'moment';\nimport numeral from 'numeral';\n\nexport default function HistoryChart({ height, history }) {\n  const [crosshairValue, setCrosshairValue] = useState(null);\n\n  const _formatDate = date => moment(date).format('MM/DD/YYYY');\n\n  if (!history.length) return null;\n\n  return (\n    <FlexibleWidthXYPlot\n      height={height}\n      onMouseLeave={() => {\n        setCrosshairValue(null);\n      }}\n    >\n      <VerticalGridLines />\n      <HorizontalGridLines />\n      <ChartLabel\n        includeMargin={false}\n        text=\"Date\"\n        xPercent={0.015}\n        yPercent={1.01}\n      />\n      <XAxis tickFormat={_formatDate} tickTotal={5} />\n\n      <ChartLabel\n        includeMargin={false}\n        style={{\n          transform: 'rotate(-90)',\n          textAnchor: 'end',\n        }}\n        text=\"# Cases\"\n        xPercent={0.03}\n        yPercent={0.06}\n      />\n      <YAxis tickFormat={y => numeral(y).format('0a')} tickTotal={5} />\n\n      {history.map(({ timeline: { cases } }) => {\n        const data = Object.keys(cases).map(date => ({\n          x: moment(date).valueOf(),\n          y: cases[date],\n        }));\n\n        return (\n          <LineSeries\n            curve={'curveMonotoneX'}\n            data={data}\n            onNearestX={d => {\n              setCrosshairValue(d);\n            }}\n          />\n        );\n      })}\n\n      {crosshairValue && (\n        <Crosshair values={[crosshairValue]}>\n          <Paper>\n            <Typography component=\"p\" variant=\"body2\">\n              Date: {_formatDate(crosshairValue.x)}\n            </Typography>\n            <Typography component=\"p\" variant=\"body2\">\n              # Cases: {numeral(crosshairValue.y).format('0,0')}\n            </Typography>\n          </Paper>\n        </Crosshair>\n      )}\n    </FlexibleWidthXYPlot>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}