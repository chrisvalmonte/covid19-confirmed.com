{"ast":null,"code":"var _jsxFileName = \"/Users/chris/Desktop/covid19-confirmed/app/src/Dashboard.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport RootRef from '@material-ui/core/RootRef';\nimport Typography from '@material-ui/core/Typography';\nimport grey from '@material-ui/core/colors/grey';\nimport { makeStyles } from '@material-ui/core/styles';\nimport DataTable from './DataTable';\nimport HistoryChart from './HistoryChart';\nimport { getCountries, getHistory } from './services';\nimport { rootStyles } from './App';\nconst historyChartContainerPadding = 8; // 8px\n\nconst useStyles = makeStyles(() => ({\n  divider: {\n    marginBottom: '16px'\n  },\n  header: {\n    marginBottom: '12px'\n  },\n  historyChartContainer: {\n    padding: `${historyChartContainerPadding}px`\n  },\n  root: { ...rootStyles,\n    backgroundColor: grey[100]\n  },\n  temp: {\n    marginTop: '50px',\n    textAlign: 'center'\n  }\n}));\nexport default function Dashboard() {\n  const classes = useStyles();\n  const [countryTableBodyRows, setCountryTableBodyRows] = useState([]);\n  const [todayTableBodyRows, setTodayTableBodyRows] = useState([]);\n  const todayTableRef = useRef(null);\n  const [history, setHistory] = useState([]); // Get data for tables and charts when component mounts\n\n  useEffect(() => {\n    const _countryData = async () => {\n      const {\n        data\n      } = await getCountries();\n      const countryTableData = data.map(({\n        active,\n        cases,\n        country,\n        deaths,\n        recovered\n      }) => ({\n        id: country,\n        country,\n        active,\n        deaths,\n        recovered,\n        cases\n      }));\n      setCountryTableBodyRows(countryTableData);\n      const todayTableData = data.map(({\n        country,\n        todayCases,\n        todayDeaths\n      }) => ({\n        id: country,\n        country,\n        todayDeaths,\n        todayCases\n      }));\n      setTodayTableBodyRows(todayTableData);\n    };\n\n    const _historyData = async () => {\n      const {\n        data\n      } = await getHistory(); // TODO: Make graph dynamic. Add date and country filters\n\n      const historyChartData = data.filter(({\n        country\n      }) => country === 'usa');\n      setHistory(historyChartData);\n    };\n\n    _countryData();\n\n    _historyData();\n  }, []); // eslint-disable-line\n\n  const countryTableHeadCells = [{\n    id: 'country',\n    label: 'Country'\n  }, {\n    id: 'active',\n    label: 'Active Cases'\n  }, {\n    id: 'deaths',\n    label: 'Deaths'\n  }, {\n    id: 'recovered',\n    label: 'Recovered'\n  }, {\n    id: 'cases',\n    label: 'Total Confirmed'\n  }];\n  const todayTableHeadCells = [{\n    id: 'country',\n    label: 'Country'\n  }, {\n    id: 'todayDeaths',\n    label: 'Deaths'\n  }, {\n    id: 'todayCases',\n    label: 'Cases'\n  }];\n  return /*#__PURE__*/React.createElement(\"article\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DashboardHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, \"Confirmed Today\"), /*#__PURE__*/React.createElement(RootRef, {\n    rootRef: todayTableRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DataTable, {\n    bodyRows: todayTableBodyRows,\n    headCells: todayTableHeadCells,\n    initialOrder: \"desc\",\n    initialOrderBy: \"todayCases\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DashboardHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, \"USA Case History\"), /*#__PURE__*/React.createElement(Paper, {\n    className: classes.historyChartContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(HistoryChart, {\n    height: todayTableRef.current ? todayTableRef.current.offsetHeight - historyChartContainerPadding * 2 : 300,\n    history: history,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DashboardHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, \"Country Overview\"), /*#__PURE__*/React.createElement(DataTable, {\n    bodyRows: countryTableBodyRows,\n    headCells: countryTableHeadCells,\n    initialOrder: \"desc\",\n    initialOrderBy: \"active\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.temp,\n    component: \"h3\",\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }, \"More insights coming soon...\")))));\n}\n\nfunction DashboardHeader({\n  children\n}) {\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.header,\n    component: \"h2\",\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }, children), /*#__PURE__*/React.createElement(Divider, {\n    className: classes.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/chris/Desktop/covid19-confirmed/app/src/Dashboard.js"],"names":["React","useEffect","useRef","useState","Container","Divider","Grid","Paper","RootRef","Typography","grey","makeStyles","DataTable","HistoryChart","getCountries","getHistory","rootStyles","historyChartContainerPadding","useStyles","divider","marginBottom","header","historyChartContainer","padding","root","backgroundColor","temp","marginTop","textAlign","Dashboard","classes","countryTableBodyRows","setCountryTableBodyRows","todayTableBodyRows","setTodayTableBodyRows","todayTableRef","history","setHistory","_countryData","data","countryTableData","map","active","cases","country","deaths","recovered","id","todayTableData","todayCases","todayDeaths","_historyData","historyChartData","filter","countryTableHeadCells","label","todayTableHeadCells","current","offsetHeight","DashboardHeader","children"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport RootRef from '@material-ui/core/RootRef';\nimport Typography from '@material-ui/core/Typography';\nimport grey from '@material-ui/core/colors/grey';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport DataTable from './DataTable';\nimport HistoryChart from './HistoryChart';\nimport { getCountries, getHistory } from './services';\nimport { rootStyles } from './App';\n\nconst historyChartContainerPadding = 8; // 8px\n\nconst useStyles = makeStyles(() => ({\n  divider: {\n    marginBottom: '16px',\n  },\n  header: {\n    marginBottom: '12px',\n  },\n  historyChartContainer: {\n    padding: `${historyChartContainerPadding}px`,\n  },\n  root: {\n    ...rootStyles,\n    backgroundColor: grey[100],\n  },\n  temp: {\n    marginTop: '50px',\n    textAlign: 'center',\n  },\n}));\n\nexport default function Dashboard() {\n  const classes = useStyles();\n\n  const [countryTableBodyRows, setCountryTableBodyRows] = useState([]);\n  const [todayTableBodyRows, setTodayTableBodyRows] = useState([]);\n  const todayTableRef = useRef(null);\n  const [history, setHistory] = useState([]);\n\n  // Get data for tables and charts when component mounts\n  useEffect(() => {\n    const _countryData = async () => {\n      const { data } = await getCountries();\n\n      const countryTableData = data.map(\n        ({ active, cases, country, deaths, recovered }) => ({\n          id: country,\n          country,\n          active,\n          deaths,\n          recovered,\n          cases,\n        }),\n      );\n      setCountryTableBodyRows(countryTableData);\n\n      const todayTableData = data.map(\n        ({ country, todayCases, todayDeaths }) => ({\n          id: country,\n          country,\n          todayDeaths,\n          todayCases,\n        }),\n      );\n      setTodayTableBodyRows(todayTableData);\n    };\n\n    const _historyData = async () => {\n      const { data } = await getHistory();\n\n      // TODO: Make graph dynamic. Add date and country filters\n      const historyChartData = data.filter(({ country }) => country === 'usa');\n      setHistory(historyChartData);\n    };\n\n    _countryData();\n    _historyData();\n  }, []); // eslint-disable-line\n\n  const countryTableHeadCells = [\n    { id: 'country', label: 'Country' },\n    {\n      id: 'active',\n      label: 'Active Cases',\n    },\n    { id: 'deaths', label: 'Deaths' },\n    { id: 'recovered', label: 'Recovered' },\n    { id: 'cases', label: 'Total Confirmed' },\n  ];\n  const todayTableHeadCells = [\n    { id: 'country', label: 'Country' },\n    { id: 'todayDeaths', label: 'Deaths' },\n    { id: 'todayCases', label: 'Cases' },\n  ];\n\n  return (\n    <article className={classes.root}>\n      <Container>\n        <Grid container spacing={3}>\n          {/* Today table */}\n          <Grid item xs={12} md={5}>\n            <DashboardHeader>Confirmed Today</DashboardHeader>\n\n            <RootRef rootRef={todayTableRef}>\n              <DataTable\n                bodyRows={todayTableBodyRows}\n                headCells={todayTableHeadCells}\n                initialOrder=\"desc\"\n                initialOrderBy=\"todayCases\"\n              />\n            </RootRef>\n          </Grid>\n\n          {/* History chart */}\n          <Grid item xs={12} md={7}>\n            <DashboardHeader>USA Case History</DashboardHeader>\n\n            <Paper className={classes.historyChartContainer}>\n              <HistoryChart\n                height={\n                  todayTableRef.current\n                    ? todayTableRef.current.offsetHeight -\n                      historyChartContainerPadding * 2\n                    : 300\n                }\n                history={history}\n              />\n            </Paper>\n          </Grid>\n\n          {/* Country overview table */}\n          <Grid item xs={12}>\n            <DashboardHeader>Country Overview</DashboardHeader>\n\n            <DataTable\n              bodyRows={countryTableBodyRows}\n              headCells={countryTableHeadCells}\n              initialOrder=\"desc\"\n              initialOrderBy=\"active\"\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <Typography className={classes.temp} component=\"h3\" variant=\"h6\">\n              More insights coming soon...\n            </Typography>\n          </Grid>\n        </Grid>\n      </Container>\n    </article>\n  );\n}\n\nfunction DashboardHeader({ children }) {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Typography className={classes.header} component=\"h2\" variant=\"h5\">\n        {children}\n      </Typography>\n      <Divider className={classes.divider} />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}