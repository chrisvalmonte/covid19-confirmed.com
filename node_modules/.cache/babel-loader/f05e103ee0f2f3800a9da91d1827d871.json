{"ast":null,"code":"import _slicedToArray from\"/Users/chris/Desktop/covid19-confirmed/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import Paper from'@material-ui/core/Paper';import Typography from'@material-ui/core/Typography';import grey from'@material-ui/core/colors/grey';import red from'@material-ui/core/colors/red';import{makeStyles}from'@material-ui/core/styles';import{ChartLabel,Crosshair,FlexibleWidthXYPlot,HorizontalGridLines,LineSeries,VerticalGridLines,XAxis,YAxis}from'react-vis';import moment from'moment';import numeral from'numeral';var useStyles=makeStyles(function(){return{crosshair:{backgroundColor:grey[900],color:grey[100],minWidth:'150px',padding:'8px 16px'}};});export default function HistoryChart(_ref){var height=_ref.height,history=_ref.history;var classes=useStyles();var _useState=useState(null),_useState2=_slicedToArray(_useState,2),crosshairValue=_useState2[0],setCrosshairValue=_useState2[1];var _formatDate=function _formatDate(date){return moment(date).format('MM/DD/YYYY');};if(!history.length)return null;return/*#__PURE__*/React.createElement(FlexibleWidthXYPlot,{height:height,onMouseLeave:function onMouseLeave(){setCrosshairValue(null);}},/*#__PURE__*/React.createElement(VerticalGridLines,null),/*#__PURE__*/React.createElement(HorizontalGridLines,null),/*#__PURE__*/React.createElement(ChartLabel,{includeMargin:false,text:\"Date\",xPercent:0.015,yPercent:1.01}),/*#__PURE__*/React.createElement(XAxis,{tickFormat:_formatDate,tickTotal:5}),/*#__PURE__*/React.createElement(ChartLabel,{includeMargin:false,style:{transform:'rotate(-90)',textAnchor:'end'},text:\"# Cases\",xPercent:0.03,yPercent:0.06}),/*#__PURE__*/React.createElement(YAxis,{tickFormat:function tickFormat(y){return numeral(y).format('0a');},tickTotal:5}),history.map(function(_ref2){var cases=_ref2.timeline.cases;var data=Object.keys(cases).map(function(date){return{x:moment(date).valueOf(),y:cases[date]};});return/*#__PURE__*/React.createElement(LineSeries,{curve:\"curveMonotoneX\",data:data,onNearestX:function onNearestX(d){setCrosshairValue(d);},stroke:red[500]});}),crosshairValue&&/*#__PURE__*/React.createElement(Crosshair,{style:{line:{backgroundColor:grey[500]}},values:[crosshairValue]},/*#__PURE__*/React.createElement(Paper,{className:classes.crosshair},/*#__PURE__*/React.createElement(Typography,{component:\"p\",variant:\"body2\"},/*#__PURE__*/React.createElement(\"strong\",null,\"# Cases\"),\":\",' ',numeral(crosshairValue.y).format('0,0')),/*#__PURE__*/React.createElement(Typography,{component:\"p\",variant:\"body2\"},/*#__PURE__*/React.createElement(\"strong\",null,\"Date\"),\": \",_formatDate(crosshairValue.x)))));}","map":{"version":3,"sources":["/Users/chris/Desktop/covid19-confirmed/app/src/HistoryChart.js"],"names":["React","useState","Paper","Typography","grey","red","makeStyles","ChartLabel","Crosshair","FlexibleWidthXYPlot","HorizontalGridLines","LineSeries","VerticalGridLines","XAxis","YAxis","moment","numeral","useStyles","crosshair","backgroundColor","color","minWidth","padding","HistoryChart","height","history","classes","crosshairValue","setCrosshairValue","_formatDate","date","format","length","transform","textAnchor","y","map","cases","timeline","data","Object","keys","x","valueOf","d","line"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport grey from '@material-ui/core/colors/grey';\nimport red from '@material-ui/core/colors/red';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  ChartLabel,\n  Crosshair,\n  FlexibleWidthXYPlot,\n  HorizontalGridLines,\n  LineSeries,\n  VerticalGridLines,\n  XAxis,\n  YAxis,\n} from 'react-vis';\nimport moment from 'moment';\nimport numeral from 'numeral';\n\nconst useStyles = makeStyles(() => ({\n  crosshair: {\n    backgroundColor: grey[900],\n    color: grey[100],\n    minWidth: '150px',\n    padding: '8px 16px',\n  },\n}));\n\nexport default function HistoryChart({ height, history }) {\n  const classes = useStyles();\n\n  const [crosshairValue, setCrosshairValue] = useState(null);\n\n  const _formatDate = date => moment(date).format('MM/DD/YYYY');\n\n  if (!history.length) return null;\n\n  return (\n    <FlexibleWidthXYPlot\n      height={height}\n      onMouseLeave={() => {\n        setCrosshairValue(null);\n      }}\n    >\n      <VerticalGridLines />\n      <HorizontalGridLines />\n      <ChartLabel\n        includeMargin={false}\n        text=\"Date\"\n        xPercent={0.015}\n        yPercent={1.01}\n      />\n      <XAxis tickFormat={_formatDate} tickTotal={5} />\n\n      <ChartLabel\n        includeMargin={false}\n        style={{\n          transform: 'rotate(-90)',\n          textAnchor: 'end',\n        }}\n        text=\"# Cases\"\n        xPercent={0.03}\n        yPercent={0.06}\n      />\n      <YAxis tickFormat={y => numeral(y).format('0a')} tickTotal={5} />\n\n      {history.map(({ timeline: { cases } }) => {\n        const data = Object.keys(cases).map(date => ({\n          x: moment(date).valueOf(),\n          y: cases[date],\n        }));\n\n        return (\n          <LineSeries\n            curve=\"curveMonotoneX\"\n            data={data}\n            onNearestX={d => {\n              setCrosshairValue(d);\n            }}\n            stroke={red[500]}\n          />\n        );\n      })}\n\n      {crosshairValue && (\n        <Crosshair\n          style={{ line: { backgroundColor: grey[500] } }}\n          values={[crosshairValue]}\n        >\n          <Paper className={classes.crosshair}>\n            <Typography component=\"p\" variant=\"body2\">\n              <strong># Cases</strong>:{' '}\n              {numeral(crosshairValue.y).format('0,0')}\n            </Typography>\n            <Typography component=\"p\" variant=\"body2\">\n              <strong>Date</strong>: {_formatDate(crosshairValue.x)}\n            </Typography>\n          </Paper>\n        </Crosshair>\n      )}\n    </FlexibleWidthXYPlot>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}