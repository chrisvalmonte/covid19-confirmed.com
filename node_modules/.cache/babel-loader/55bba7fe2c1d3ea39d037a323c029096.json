{"ast":null,"code":"var _jsxFileName = \"/Users/chris/Desktop/covid19-confirmed/app/src/Dashboard.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport RootRef from '@material-ui/core/RootRef';\nimport Typography from '@material-ui/core/Typography';\nimport grey from '@material-ui/core/colors/grey';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ChartLabel, FlexibleWidthXYPlot, HorizontalGridLines, LineSeries, VerticalGridLines, XAxis, YAxis } from 'react-vis';\nimport moment from 'moment';\nimport numeral from 'numeral';\nimport { DataTable } from './DataTable';\nimport { getCountries, getHistory } from './services';\nimport { rootStyles } from './App';\nconst useStyles = makeStyles(() => ({\n  divider: {\n    marginBottom: '16px'\n  },\n  header: {\n    marginBottom: '12px'\n  },\n  root: { ...rootStyles,\n    backgroundColor: grey[100]\n  }\n}));\nexport function Dashboard() {\n  const classes = useStyles();\n  const [countryTableBodyRows, setCountryTableBodyRows] = useState([]);\n  const [todayTableBodyRows, setTodayTableBodyRows] = useState([]);\n  const todayTableRef = useRef(null);\n  const [history, setHistory] = useState([]); // Get data for tables and charts when component mounts\n\n  useEffect(() => {\n    const _countryData = async () => {\n      const {\n        data\n      } = await getCountries();\n      const countryTableData = data.map(({\n        active,\n        cases,\n        country,\n        deaths,\n        recovered\n      }) => ({\n        id: country,\n        country,\n        active,\n        deaths,\n        recovered,\n        cases\n      }));\n      setCountryTableBodyRows(countryTableData);\n      const todayTableData = data.map(({\n        country,\n        todayCases,\n        todayDeaths\n      }) => ({\n        id: country,\n        country,\n        todayDeaths,\n        todayCases\n      }));\n      setTodayTableBodyRows(todayTableData);\n    };\n\n    const _historyData = async () => {\n      const {\n        data\n      } = await getHistory();\n      const historyChartData = data.filter(({\n        country\n      }) => country === 'usa');\n      setHistory(historyChartData);\n    };\n\n    _countryData();\n\n    _historyData();\n  }, []); // eslint-disable-line\n\n  const countryTableHeadCells = [{\n    id: 'country',\n    label: 'Country'\n  }, {\n    id: 'active',\n    label: 'Active Cases'\n  }, {\n    id: 'deaths',\n    label: 'Deaths'\n  }, {\n    id: 'recovered',\n    label: 'Recovered'\n  }, {\n    id: 'cases',\n    label: 'Total Confirmed'\n  }];\n  const todayTableHeadCells = [{\n    id: 'country',\n    label: 'Country'\n  }, {\n    id: 'todayDeaths',\n    label: 'Deaths'\n  }, {\n    id: 'todayCases',\n    label: 'Cases'\n  }];\n  console.log(history);\n  return /*#__PURE__*/React.createElement(\"article\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DashboardHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, \"Confirmed Today\"), /*#__PURE__*/React.createElement(RootRef, {\n    rootRef: todayTableRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DataTable, {\n    bodyRows: todayTableBodyRows,\n    headCells: todayTableHeadCells,\n    initialOrder: \"desc\",\n    initialOrderBy: \"todayCases\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DashboardHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, \"Case History\"), /*#__PURE__*/React.createElement(HistoryChart, {\n    height: todayTableRef.current ? todayTableRef.current.offsetHeight : 300,\n    history: history,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DashboardHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, \"Country Overview\"), /*#__PURE__*/React.createElement(DataTable, {\n    bodyRows: countryTableBodyRows,\n    headCells: countryTableHeadCells,\n    initialOrder: \"desc\",\n    initialOrderBy: \"active\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  })))));\n}\n\nfunction DashboardHeader({\n  children\n}) {\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.header,\n    component: \"h2\",\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, children), /*#__PURE__*/React.createElement(Divider, {\n    className: classes.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction HistoryChart({\n  height,\n  history\n}) {\n  if (!history.length) return null;\n  return /*#__PURE__*/React.createElement(FlexibleWidthXYPlot, {\n    height: height,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(VerticalGridLines, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(HorizontalGridLines, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ChartLabel, {\n    text: \"Date\",\n    includeMargin: false,\n    xPercent: 0.025,\n    yPercent: 1.01,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    tickFormat: x => moment(x).format('MM/DD'),\n    tickLabelAngle: -45,\n    tickTotal: 10,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ChartLabel, {\n    text: \"# Cases\",\n    includeMargin: false,\n    xPercent: 0.025,\n    yPercent: 1.01,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    tickFormat: y => numeral(y).format('0a'),\n    tickTotal: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }\n  }), history.map(({\n    country,\n    timeline: {\n      cases\n    }\n  }) => {\n    const data = Object.keys(cases).map(date => ({\n      x: moment(date).valueOf(),\n      y: cases[date]\n    }));\n    return /*#__PURE__*/React.createElement(LineSeries, {\n      curve: 'curveMonotoneX',\n      data: data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 16\n      }\n    });\n  }));\n}","map":{"version":3,"sources":["/Users/chris/Desktop/covid19-confirmed/app/src/Dashboard.js"],"names":["React","useEffect","useRef","useState","Container","Divider","Grid","RootRef","Typography","grey","makeStyles","ChartLabel","FlexibleWidthXYPlot","HorizontalGridLines","LineSeries","VerticalGridLines","XAxis","YAxis","moment","numeral","DataTable","getCountries","getHistory","rootStyles","useStyles","divider","marginBottom","header","root","backgroundColor","Dashboard","classes","countryTableBodyRows","setCountryTableBodyRows","todayTableBodyRows","setTodayTableBodyRows","todayTableRef","history","setHistory","_countryData","data","countryTableData","map","active","cases","country","deaths","recovered","id","todayTableData","todayCases","todayDeaths","_historyData","historyChartData","filter","countryTableHeadCells","label","todayTableHeadCells","console","log","current","offsetHeight","DashboardHeader","children","HistoryChart","height","length","x","format","y","timeline","Object","keys","date","valueOf"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport RootRef from '@material-ui/core/RootRef';\nimport Typography from '@material-ui/core/Typography';\nimport grey from '@material-ui/core/colors/grey';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  ChartLabel,\n  FlexibleWidthXYPlot,\n  HorizontalGridLines,\n  LineSeries,\n  VerticalGridLines,\n  XAxis,\n  YAxis,\n} from 'react-vis';\nimport moment from 'moment';\nimport numeral from 'numeral';\n\nimport { DataTable } from './DataTable';\nimport { getCountries, getHistory } from './services';\nimport { rootStyles } from './App';\n\nconst useStyles = makeStyles(() => ({\n  divider: {\n    marginBottom: '16px',\n  },\n  header: {\n    marginBottom: '12px',\n  },\n  root: {\n    ...rootStyles,\n    backgroundColor: grey[100],\n  },\n}));\n\nexport function Dashboard() {\n  const classes = useStyles();\n\n  const [countryTableBodyRows, setCountryTableBodyRows] = useState([]);\n  const [todayTableBodyRows, setTodayTableBodyRows] = useState([]);\n  const todayTableRef = useRef(null);\n  const [history, setHistory] = useState([]);\n\n  // Get data for tables and charts when component mounts\n  useEffect(() => {\n    const _countryData = async () => {\n      const { data } = await getCountries();\n\n      const countryTableData = data.map(\n        ({ active, cases, country, deaths, recovered }) => ({\n          id: country,\n          country,\n          active,\n          deaths,\n          recovered,\n          cases,\n        }),\n      );\n      setCountryTableBodyRows(countryTableData);\n\n      const todayTableData = data.map(\n        ({ country, todayCases, todayDeaths }) => ({\n          id: country,\n          country,\n          todayDeaths,\n          todayCases,\n        }),\n      );\n      setTodayTableBodyRows(todayTableData);\n    };\n\n    const _historyData = async () => {\n      const { data } = await getHistory();\n\n      const historyChartData = data.filter(({ country }) => country === 'usa');\n      setHistory(historyChartData);\n    };\n\n    _countryData();\n    _historyData();\n  }, []); // eslint-disable-line\n\n  const countryTableHeadCells = [\n    { id: 'country', label: 'Country' },\n    {\n      id: 'active',\n      label: 'Active Cases',\n    },\n    { id: 'deaths', label: 'Deaths' },\n    { id: 'recovered', label: 'Recovered' },\n    { id: 'cases', label: 'Total Confirmed' },\n  ];\n  const todayTableHeadCells = [\n    { id: 'country', label: 'Country' },\n    { id: 'todayDeaths', label: 'Deaths' },\n    { id: 'todayCases', label: 'Cases' },\n  ];\n\n  console.log(history);\n\n  return (\n    <article className={classes.root}>\n      <Container>\n        <Grid container spacing={3}>\n          {/* Today table */}\n          <Grid item xs={12} md={5}>\n            <DashboardHeader>Confirmed Today</DashboardHeader>\n\n            <RootRef rootRef={todayTableRef}>\n              <DataTable\n                bodyRows={todayTableBodyRows}\n                headCells={todayTableHeadCells}\n                initialOrder=\"desc\"\n                initialOrderBy=\"todayCases\"\n              />\n            </RootRef>\n          </Grid>\n\n          {/* History chart */}\n          <Grid item xs={12} md={7}>\n            <DashboardHeader>Case History</DashboardHeader>\n\n            <HistoryChart\n              height={\n                todayTableRef.current ? todayTableRef.current.offsetHeight : 300\n              }\n              history={history}\n            />\n          </Grid>\n\n          {/* Country overview table */}\n          <Grid item xs={12}>\n            <DashboardHeader>Country Overview</DashboardHeader>\n\n            <DataTable\n              bodyRows={countryTableBodyRows}\n              headCells={countryTableHeadCells}\n              initialOrder=\"desc\"\n              initialOrderBy=\"active\"\n            />\n          </Grid>\n        </Grid>\n      </Container>\n    </article>\n  );\n}\n\nfunction DashboardHeader({ children }) {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Typography className={classes.header} component=\"h2\" variant=\"h5\">\n        {children}\n      </Typography>\n      <Divider className={classes.divider} />\n    </>\n  );\n}\n\nfunction HistoryChart({ height, history }) {\n  if (!history.length) return null;\n\n  return (\n    <FlexibleWidthXYPlot height={height}>\n      <VerticalGridLines />\n      <HorizontalGridLines />\n      <ChartLabel\n        text=\"Date\"\n        includeMargin={false}\n        xPercent={0.025}\n        yPercent={1.01}\n      />\n      <XAxis\n        tickFormat={x => moment(x).format('MM/DD')}\n        tickLabelAngle={-45}\n        tickTotal={10}\n      />\n\n      <ChartLabel\n        text=\"# Cases\"\n        includeMargin={false}\n        xPercent={0.025}\n        yPercent={1.01}\n      />\n      <YAxis tickFormat={y => numeral(y).format('0a')} tickTotal={5} />\n\n      {history.map(({ country, timeline: { cases } }) => {\n        const data = Object.keys(cases).map(date => ({\n          x: moment(date).valueOf(),\n          y: cases[date],\n        }));\n\n        return <LineSeries curve={'curveMonotoneX'} data={data} />;\n      })}\n    </FlexibleWidthXYPlot>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}