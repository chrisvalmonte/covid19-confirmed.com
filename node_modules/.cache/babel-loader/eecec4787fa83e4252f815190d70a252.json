{"ast":null,"code":"var _jsxFileName = \"/Users/chris/Desktop/covid19-confirmed/app/src/Map.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport MapGL, { Layer, Source } from 'react-map-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { getCountryData, getUSAData } from './services';\nimport { clusterCountLayer, clusterLayer } from './Map.constants';\nexport function Map() {\n  const [viewport, setViewport] = useState({\n    latitude: 40.67,\n    longitude: -103.59,\n    zoom: 1,\n    bearing: 0,\n    pitch: 0\n  });\n  const [clusterData, setClusterData] = useState(null);\n  const sourceRef = useRef(); // Get GEO data when component mounts\n\n  useEffect(() => {\n    const _geoData = async () => {\n      const {\n        data: countryData\n      } = await getCountryData();\n      const formattedCountryData = countryData.map(({\n        cases,\n        country,\n        countryInfo: {\n          lat,\n          long\n        },\n        deaths,\n        recovered\n      }) => ({\n        geometry: {\n          coordinates: [long, lat],\n          type: 'Point'\n        },\n        properties: {\n          cases,\n          country,\n          deaths,\n          recovered\n        },\n        type: 'Feature'\n      }));\n      const {\n        data: usaData\n      } = await getUSAData();\n      const formattedUSAData = usaData.map(({\n        city,\n        coordinates: {\n          latitude,\n          longitude\n        },\n        province,\n        stats: {\n          confirmed,\n          deaths,\n          recovered\n        }\n      }) => ({\n        geometry: {\n          coordinates: [longitude, latitude],\n          type: 'Point'\n        },\n        properties: {\n          cases: confirmed,\n          city,\n          deaths,\n          recovered,\n          state: province\n        },\n        type: 'Feature'\n      }));\n      setClusterData({\n        features: [formattedCountryData],\n        type: 'FeatureCollection'\n      });\n    };\n\n    _geoData();\n  }, []);\n\n  const _onViewportChange = updatedViewport => setViewport(updatedViewport);\n\n  const _onClick = event => {\n    if (!(event.hasOwnProperty('features') && event.features[0])) return;\n    const feature = event.features[0];\n    const clusterId = feature.properties.cluster_id;\n    const mapboxSource = sourceRef.current.getSource();\n    mapboxSource.getClusterExpansionZoom(clusterId, (err, zoom) => {\n      if (err) return;\n\n      _onViewportChange({\n        latitude: feature.geometry.coordinates[1],\n        longitude: feature.geometry.coordinates[0],\n        transitionDuration: 500,\n        viewport,\n        zoom\n      });\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(MapGL, Object.assign({}, viewport, {\n    dragRotate: false,\n    height: \"100%\",\n    interactiveLayerIds: [clusterLayer.id],\n    mapStyle: \"mapbox://styles/mapbox/dark-v9\",\n    mapboxApiAccessToken: process.env.REACT_APP_MAPBOX_GL_API_TOKEN,\n    onClick: _onClick,\n    onViewportChange: _onViewportChange,\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Source, {\n    cluster: true,\n    clusterMaxZoom: 14,\n    clusterRadius: 50,\n    data: clusterData,\n    ref: sourceRef,\n    type: \"geojson\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Layer, Object.assign({}, clusterLayer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Layer, Object.assign({}, clusterCountLayer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/chris/Desktop/covid19-confirmed/app/src/Map.js"],"names":["React","useEffect","useRef","useState","MapGL","Layer","Source","getCountryData","getUSAData","clusterCountLayer","clusterLayer","Map","viewport","setViewport","latitude","longitude","zoom","bearing","pitch","clusterData","setClusterData","sourceRef","_geoData","data","countryData","formattedCountryData","map","cases","country","countryInfo","lat","long","deaths","recovered","geometry","coordinates","type","properties","usaData","formattedUSAData","city","province","stats","confirmed","state","features","_onViewportChange","updatedViewport","_onClick","event","hasOwnProperty","feature","clusterId","cluster_id","mapboxSource","current","getSource","getClusterExpansionZoom","err","transitionDuration","id","process","env","REACT_APP_MAPBOX_GL_API_TOKEN"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport MapGL, { Layer, Source } from 'react-map-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nimport { getCountryData, getUSAData } from './services';\nimport { clusterCountLayer, clusterLayer } from './Map.constants';\n\nexport function Map() {\n  const [viewport, setViewport] = useState({\n    latitude: 40.67,\n    longitude: -103.59,\n    zoom: 1,\n    bearing: 0,\n    pitch: 0,\n  });\n  const [clusterData, setClusterData] = useState(null);\n  const sourceRef = useRef();\n\n  // Get GEO data when component mounts\n  useEffect(() => {\n    const _geoData = async () => {\n      const { data: countryData } = await getCountryData();\n      const formattedCountryData = countryData.map(\n        ({\n          cases,\n          country,\n          countryInfo: { lat, long },\n          deaths,\n          recovered,\n        }) => ({\n          geometry: {\n            coordinates: [long, lat],\n            type: 'Point',\n          },\n          properties: {\n            cases,\n            country,\n            deaths,\n            recovered,\n          },\n          type: 'Feature',\n        }),\n      );\n\n      const { data: usaData } = await getUSAData();\n      const formattedUSAData = usaData.map(\n        ({\n          city,\n          coordinates: { latitude, longitude },\n          province,\n          stats: { confirmed, deaths, recovered },\n        }) => ({\n          geometry: {\n            coordinates: [longitude, latitude],\n            type: 'Point',\n          },\n          properties: {\n            cases: confirmed,\n            city,\n            deaths,\n            recovered,\n            state: province,\n          },\n          type: 'Feature',\n        }),\n      );\n\n      setClusterData({\n        features: [formattedCountryData],\n        type: 'FeatureCollection',\n      });\n    };\n\n    _geoData();\n  }, []);\n\n  const _onViewportChange = updatedViewport => setViewport(updatedViewport);\n\n  const _onClick = event => {\n    if (!(event.hasOwnProperty('features') && event.features[0])) return;\n\n    const feature = event.features[0];\n    const clusterId = feature.properties.cluster_id;\n\n    const mapboxSource = sourceRef.current.getSource();\n\n    mapboxSource.getClusterExpansionZoom(clusterId, (err, zoom) => {\n      if (err) return;\n\n      _onViewportChange({\n        latitude: feature.geometry.coordinates[1],\n        longitude: feature.geometry.coordinates[0],\n        transitionDuration: 500,\n        viewport,\n        zoom,\n      });\n    });\n  };\n\n  return (\n    <MapGL\n      {...viewport}\n      dragRotate={false}\n      height=\"100%\"\n      interactiveLayerIds={[clusterLayer.id]}\n      mapStyle=\"mapbox://styles/mapbox/dark-v9\"\n      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_GL_API_TOKEN}\n      onClick={_onClick}\n      onViewportChange={_onViewportChange}\n      width=\"100%\"\n    >\n      <Source\n        cluster={true}\n        clusterMaxZoom={14}\n        clusterRadius={50}\n        data={clusterData}\n        ref={sourceRef}\n        type=\"geojson\"\n      >\n        <Layer {...clusterLayer} />\n        <Layer {...clusterCountLayer} />\n      </Source>\n    </MapGL>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}