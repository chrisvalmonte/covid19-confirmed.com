{"ast":null,"code":"var _jsxFileName = \"/Users/chris/Desktop/covid19-confirmed/app/src/Map.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport MapGL, { Layer, Source } from 'react-map-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { getCountryData, getUSAData } from './services';\nexport function Map() {\n  const [viewport, setViewport] = useState({\n    latitude: 40.67,\n    longitude: -103.59,\n    zoom: 1.5,\n    bearing: 0,\n    pitch: 0\n  });\n  const [clusterData, setClusterData] = useState(null);\n  const sourceRef = useRef(); // Get GEO data when component mounts\n\n  useEffect(() => {\n    const _geoData = async () => {\n      const {\n        data: countryData\n      } = await getCountryData();\n      const formattedCountryData = countryData.filter(({\n        country\n      }) => country !== 'USA').map(({\n        cases,\n        country,\n        countryInfo: {\n          lat,\n          long\n        },\n        deaths,\n        recovered\n      }) => ({\n        geometry: {\n          coordinates: [long, lat],\n          type: 'Point'\n        },\n        properties: {\n          active: cases - deaths - recovered,\n          cases,\n          country,\n          deaths,\n          recovered\n        },\n        type: 'Feature'\n      }));\n      const {\n        data: usaData\n      } = await getUSAData();\n      const formattedUSAData = usaData.map(({\n        city,\n        coordinates: {\n          latitude,\n          longitude\n        },\n        province,\n        stats: {\n          confirmed,\n          deaths,\n          recovered\n        }\n      }) => {\n        const cases = parseInt(confirmed);\n        const numDeaths = parseInt(deaths);\n        const numRecovered = parseInt(recovered);\n        return {\n          geometry: {\n            coordinates: [longitude, latitude],\n            type: 'Point'\n          },\n          properties: {\n            active: cases - deaths - recovered,\n            cases,\n            city,\n            country: 'USA',\n            deaths: numDeaths,\n            recovered: numRecovered,\n            state: province\n          },\n          type: 'Feature'\n        };\n      });\n      setClusterData({\n        features: formattedCountryData,\n        type: 'FeatureCollection'\n      });\n    };\n\n    _geoData();\n  }, []);\n\n  const _onViewportChange = updatedViewport => setViewport(updatedViewport);\n\n  const _onClick = event => {\n    const feature = event.features[0];\n    const clusterId = feature.properties.cluster_id;\n    const mapboxSource = sourceRef.current.getSource();\n    mapboxSource.getClusterExpansionZoom(clusterId, (err, zoom) => {\n      if (err) return;\n\n      _onViewportChange({\n        latitude: feature.geometry.coordinates[1],\n        longitude: feature.geometry.coordinates[0],\n        transitionDuration: 500,\n        viewport,\n        zoom\n      });\n    });\n  };\n\n  const clusterLayer = {\n    filter: ['all', ['has', 'active'], ['>', 'active', 0]],\n    id: 'cluster-circle',\n    paint: {\n      'circle-color': '#f44336',\n      'circle-opacity': 0.2,\n      'circle-radius': ['step', ['get', 'active'], 2.5, 50, 15, 375, 20]\n    },\n    source: 'cluster-circle',\n    type: 'circle'\n  };\n  return /*#__PURE__*/React.createElement(MapGL, Object.assign({}, viewport, {\n    dragRotate: false,\n    height: \"100%\",\n    interactiveLayerIds: [clusterLayer.id],\n    mapStyle: \"mapbox://styles/mapbox/dark-v9\",\n    mapboxApiAccessToken: process.env.REACT_APP_MAPBOX_GL_API_TOKEN,\n    onClick: _onClick,\n    onViewportChange: _onViewportChange,\n    width: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Source, {\n    data: clusterData,\n    ref: sourceRef,\n    type: \"geojson\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Layer, Object.assign({}, clusterLayer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/chris/Desktop/covid19-confirmed/app/src/Map.js"],"names":["React","useEffect","useRef","useState","MapGL","Layer","Source","getCountryData","getUSAData","Map","viewport","setViewport","latitude","longitude","zoom","bearing","pitch","clusterData","setClusterData","sourceRef","_geoData","data","countryData","formattedCountryData","filter","country","map","cases","countryInfo","lat","long","deaths","recovered","geometry","coordinates","type","properties","active","usaData","formattedUSAData","city","province","stats","confirmed","parseInt","numDeaths","numRecovered","state","features","_onViewportChange","updatedViewport","_onClick","event","feature","clusterId","cluster_id","mapboxSource","current","getSource","getClusterExpansionZoom","err","transitionDuration","clusterLayer","id","paint","source","process","env","REACT_APP_MAPBOX_GL_API_TOKEN"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport MapGL, { Layer, Source } from 'react-map-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nimport { getCountryData, getUSAData } from './services';\n\nexport function Map() {\n  const [viewport, setViewport] = useState({\n    latitude: 40.67,\n    longitude: -103.59,\n    zoom: 1.5,\n    bearing: 0,\n    pitch: 0,\n  });\n  const [clusterData, setClusterData] = useState(null);\n  const sourceRef = useRef();\n\n  // Get GEO data when component mounts\n  useEffect(() => {\n    const _geoData = async () => {\n      const { data: countryData } = await getCountryData();\n      const formattedCountryData = countryData\n        .filter(({ country }) => country !== 'USA')\n        .map(\n          ({\n            cases,\n            country,\n            countryInfo: { lat, long },\n            deaths,\n            recovered,\n          }) => ({\n            geometry: {\n              coordinates: [long, lat],\n              type: 'Point',\n            },\n            properties: {\n              active: cases - deaths - recovered,\n              cases,\n              country,\n              deaths,\n              recovered,\n            },\n            type: 'Feature',\n          }),\n        );\n\n      const { data: usaData } = await getUSAData();\n      const formattedUSAData = usaData.map(\n        ({\n          city,\n          coordinates: { latitude, longitude },\n          province,\n          stats: { confirmed, deaths, recovered },\n        }) => {\n          const cases = parseInt(confirmed);\n          const numDeaths = parseInt(deaths);\n          const numRecovered = parseInt(recovered);\n\n          return {\n            geometry: {\n              coordinates: [longitude, latitude],\n              type: 'Point',\n            },\n            properties: {\n              active: cases - deaths - recovered,\n              cases,\n              city,\n              country: 'USA',\n              deaths: numDeaths,\n              recovered: numRecovered,\n              state: province,\n            },\n            type: 'Feature',\n          };\n        },\n      );\n\n      setClusterData({\n        features: formattedCountryData,\n        type: 'FeatureCollection',\n      });\n    };\n\n    _geoData();\n  }, []);\n\n  const _onViewportChange = updatedViewport => setViewport(updatedViewport);\n\n  const _onClick = event => {\n    const feature = event.features[0];\n    const clusterId = feature.properties.cluster_id;\n\n    const mapboxSource = sourceRef.current.getSource();\n\n    mapboxSource.getClusterExpansionZoom(clusterId, (err, zoom) => {\n      if (err) return;\n\n      _onViewportChange({\n        latitude: feature.geometry.coordinates[1],\n        longitude: feature.geometry.coordinates[0],\n        transitionDuration: 500,\n        viewport,\n        zoom,\n      });\n    });\n  };\n\n  const clusterLayer = {\n    filter: ['all', ['has', 'active'], ['>', 'active', 0]],\n    id: 'cluster-circle',\n    paint: {\n      'circle-color': '#f44336',\n      'circle-opacity': 0.2,\n      'circle-radius': ['step', ['get', 'active'], 2.5, 50, 15, 375, 20],\n    },\n    source: 'cluster-circle',\n    type: 'circle',\n  };\n\n  return (\n    <MapGL\n      {...viewport}\n      dragRotate={false}\n      height=\"100%\"\n      interactiveLayerIds={[clusterLayer.id]}\n      mapStyle=\"mapbox://styles/mapbox/dark-v9\"\n      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_GL_API_TOKEN}\n      onClick={_onClick}\n      onViewportChange={_onViewportChange}\n      width=\"100%\"\n    >\n      <Source data={clusterData} ref={sourceRef} type=\"geojson\">\n        <Layer {...clusterLayer} />\n      </Source>\n    </MapGL>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}